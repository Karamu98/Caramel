* debugging tools (#60): the issue online already contains interesting tips on this, look at it
* work stealing job system (see #100) + mt scheduler based on const awareness for types
* add examples (and credits) from @alanjfs :)

EXAMPLES
* filter on runtime values/variables (not only types)
* support to polymorphic types (see #859)

WIP:
* view/group: no storage_traits dependency -> use storage instead of components for the definition
* resource<T>::operator</<=/>/>=
* simplify emitter (see uvw), runtime events
* basic_storage::bind for cross-registry setups
* uses-allocator construction: any (with allocator support), poly, ...
* process scheduler: reviews, use free lists internally
* iterator based try_emplace vs try_insert for perf reasons
* dedicated entity storage, in-place O(1) release/destroy for non-orphaned entities, out-of-sync model
* entity-only and exclude-only views
* custom allocators all over
* use ENTT_NOEXCEPT_IF as appropriate (ie make compressed_pair conditionally noexcept)

WIP:
* add user data to type_info
* write documentation for custom storages and views!!
* make runtime views use opaque storage and therefore return also elements.
* entity-aware observer, add observer functions aside observer class
* deprecate non-owning groups in favor of owning views and view packs, introduce lazy owning views
